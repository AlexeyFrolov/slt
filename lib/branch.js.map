{"version":3,"sources":["../src/branch.js"],"names":[],"mappings":";;;;;;;;;;;;yBAAqC,WAAW;;qBAC9B,OAAO;;;;qBACyB,SAAS;;qBACzC,SAAS;;;;AAC3B,IAAM,CAAC,GAAG,wBAAM,KAAK,CAAC,CAAC;AACvB,IAAM,GAAG,GAAG,wBAAM,SAAS,CAAC,CAAC;;IAEvB,MAAM;AACG,aADT,MAAM,CACI,KAAK,EAAE,KAAK,EAAE,GAAG,EAAiB;YAAf,MAAM,gCAAG,IAAI;;8BAD1C,MAAM;;AAEJ,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,YAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACf,YAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,YAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AACf,YAAI,CAAC,KAAK,GAAG,IAAI,CAAC;AAClB,YAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACtB;;iBATC,MAAM;;eAWH,iBAAG;AACJ,gBAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;SAClC;;;eAEQ,mBAAC,KAAK,EAAE;AACb,gBAAI,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC3D,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC3B,mBAAO,MAAM,CAAC;SACjB;;;eAEO,kBAAC,KAAK,EAAE;AACZ,mBAAO,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;SAC9B;;;eAEE,eAAwB;;;gBAAvB,IAAI,gCAAG,EAAE;gBAAE,KAAK,gCAAG,EAAE;;sCACJ,IAAI,CAAC,kBAAkB,CAAC,mBAAM,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;;AAAnE,gBAAI,uBAAJ,IAAI;AAAE,iBAAK,uBAAL,KAAK;;AACb,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,gBAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,eAAG,CAAC,cAAc,EAAE,WAlCU,IAAI,EAkCT,IAAI,CAAC,EAAE,WAlCF,IAAI,EAkCG,KAAK,CAAC,CAAC,CAAC;AAC7C,gBAAI,OAAO,GAAG,eArCb,MAAM,EAqCc,KAAK,CAAC,CAAC;AAC5B,gBAAI,MAAM,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,GAC3D,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACtC,aAAC,CAAC,aAAa,EAAE,WAtCa,IAAI,EAsCZ,MAAM,CAAC,CAAC,CAAC;AAC/B,gBAAM,UAAU,GAAG,SAAb,UAAU,GAA6C;oBAAzC,IAAI,gCAAG,eAzCT,IAAI,EAyCe;oBAAE,KAAK,gCAAG,eAzClC,GAAG,EAyCwC;;AACpD,oBAAI,IAAI,GAAG,MAAK,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD,oBAAI,WAzCD,UAAU,EAyCE,IAAI,CAAC,EAAE;;AAClB,4BAAI,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC7B,2BAAG,CAAC,uCAAuC,EAAE,WA3CvB,IAAI,EA2CwB,IAAI,CAAC,EAAE,WA3CnC,IAAI,EA2CoC,GAAG,CAAC,CAAC,CAAC;AACpE,4BAAI,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAK,SAAS,CAAC,MAAM,CAAC,EAAE,WA5CtD,IAAI,EA4CuD,GAAG,CAAC,CAAC,CAAC;AAC1D,4BAAI,WA7CO,SAAS,EA6CN,MAAM,CAAC,EAAE;AACnB,+BAAG,CAAC,kBAAkB,CAAC,CAAC;AACxB,kCAAM,CAAC,IAAI,CAAC,MAAK,GAAG,CAAC,CAAC;AACtB,kCAAK,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/B,kCAAM,CAAC,IAAI,CAAC,YAAM;AACd,mCAAG,CAAC,8BAA8B,EAAE,WAlDtB,IAAI,EAkDuB,IAAI,CAAC,CAAC,CAAC;AAChD,sCAAK,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAK,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/D,sCAAK,GAAG,CAAC,MAAM,EAAE,CAAC;6BACrB,CAAC,CAAC;yBACN,MAAM;AACH,6BAAC,CAAC,0BAA0B,EAAE,WAvDZ,IAAI,EAuDa,MAAM,CAAC,CAAC,CAAC;AAC5C,kCAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC3B,6BAAC,CAAC,cAAc,EAAE,WAzDA,IAAI,EAyDC,MAAM,CAAC,CAAC,CAAC;yBACnC;;iBACJ;AACD,oBAAI,CAAC,WA9DI,GAAG,CA8DH,KAAK,CAAC,KAAK,CAAC,EAAE;AACnB,2BAAO;iBACV;AACD,qBAAK,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,UAAC,CAAC;2BAAK,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAAA,CAAC,CAAC;aAC5E,CAAC;AACF,sBAAU,CAAC,eAnEO,IAAI,CAmEF,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;AACnC,gBAAI,CAAC,KAAK,GAAG,MAAM,CAAC;AACpB,gBAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAChC,mBAAO,IAAI,CAAC;SACf;;;eAEiB,4BAAC,IAAI,EAAE,KAAK,EAAE;AAC5B,gBAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;AACpB,gBAAI,CAAC,GAAG,KAAK,CAAC;AACd,mBAAO,CAAC,EAAE,EAAE;AACR,oBAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzB,oBAAI,GAAG,GAAG,EAAE,CAAC;AACb,mBAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACvB,iBAAC,GAAG,GAAG,CAAC;AACR,oBAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;AAC7B,wBAAI,GAAG,CAAC,CAAC;AACT,yBAAK,GAAG,CAAC,CAAC;iBACb;aACJ;AACD,mBAAO,EAAE,IAAI,EAAJ,IAAI,EAAE,KAAK,EAAL,KAAK,EAAE,CAAA;SACzB;;;eAEO,oBAAG;AACP,mBAAO,IAAI,CAAC,KAAK,CAAC;SACrB;;;eAEE,eAA4B;gBAA3B,IAAI,gCAAG,IAAI;gBAAE,KAAK,gCAAG,IAAI;;AACzB,iBAAK,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC;AAC5B,gBAAI,CAAC,IAAI,EAAE;AACP,uBAAO,KAAK,CAAC,IAAI,EAAE,CAAC;aACvB;AACD,gBAAI,GAAG,mBAAM,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC5B,gBAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC9B,mBAAO,WAlGN,IAAI,EAkGO,KAAK,CAAC,CAAC;SACtB;;;WA9FC,MAAM;;;qBAiGG,MAAM","file":"branch.js","sourcesContent":["import { fromJS, is, Map, List} from \"immutable\";\nimport debug from \"debug\";\nimport { toJS, isFunction, isPromise, insp } from \"./utils\";\nimport Slots from \"./slots\";\nconst d = debug(\"slt\");\nconst log = debug(\"slt:log\");\n\nclass Branch {\n    constructor(rules, state, ctx, parent = null) {\n        this.rules = rules;\n        this.state = state;\n        this.ctx = ctx;\n        this.parent = parent;\n        this.path = [];\n        this.value = null;\n        this.children = [];\n    }\n\n    reset() {\n        this.state = this.initialState;\n    }\n\n    newBranch(state) {\n        let branch = new Branch(this.rules, state, this.ctx, this);\n        this.children.push(branch);\n        return branch;\n    }\n\n    setState(value) {\n        return this.set([], value);\n    }\n\n    set(path = [], value = {}) {\n        ({path, value} = this.reducePathAndValue(Slots.makePath(path), value));\n        this.path = path;\n        this.value = value;\n        log(\"SET %s TO %s\", insp(path), insp(value));\n        let imValue = fromJS(value);\n        let result = imValue.toJS ? this.state.mergeDeepIn(path, imValue)\n            : this.state.setIn(path, imValue);\n        d(\"MERGED \\n%s\", insp(result));\n        const applyRules = (path = new List(), value = new Map()) => {\n            let rule = this.rules.get(path.toArray().join(\".\"));\n            if (isFunction(rule)) {\n                let val = result.getIn(path);\n                log(\"RULE on path %s matched with value %s\", insp(path), insp(val));\n                let branch = rule.call(this.newBranch(result), toJS(val));\n                if (isPromise(branch)) {\n                    log(\"PROMISE RETURNED\");\n                    branch.bind(this.ctx); // out of call stack\n                    this.ctx.promises.push(branch);\n                    branch.then(() => {\n                        log(\"PROMISE FULFILLED for SET %s\", insp(path));\n                        this.ctx.promises.splice(this.ctx.promises.indexOf(branch), 1);\n                        this.ctx.commit();\n                    });\n                } else {\n                    d(\"NEW BRANCH with state %s\", insp(result));\n                    result = branch.getState();\n                    d(\"RESULT is %s\", insp(result));\n                }\n            }\n            if (!Map.isMap(value)) {\n                return;\n            }\n            value.flip().toList().map((k) => applyRules(path.push(k), value.get(k)));\n        };\n        applyRules(new List(path), result);\n        this.state = result;\n        this.ctx.slots._fireOnSet(this);\n        return this;\n    }\n\n    reducePathAndValue(path, value) {\n        let i = path.length;\n        let v = value;\n        while (i--) {\n            let p = path.slice(0, i);\n            let tmp = {};\n            tmp[path.slice(i)] = v;\n            v = tmp;\n            if (this.rules.get(p.join(\".\"))) {\n                path = p;\n                value = v;\n            }\n        }\n        return { path, value }\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    get(path = null, state = null) {\n        state = state || this.state;\n        if (!path) {\n            return state.toJS();\n        }\n        path = Slots.makePath(path);\n        let value = state.getIn(path);\n        return toJS(value);\n    }\n}\n\nexport default Branch;"]}