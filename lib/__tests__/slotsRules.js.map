{"version":3,"sources":["../../src/__tests__/slotsRules.js"],"names":[],"mappings":";;;;qBAAkB,UAAU;;;;yBACV,cAAc;;;;AAEhC,QAAQ,CAAE,aAAa,EAAE,YAAM;AAC3B,QAAM,KAAK,GAAG,+CAAiB,EAAE,CAAC,CAAC;;AAEnC,MAAE,CAAE,oCAAoC,EAAE,YAAM;AAC5C,aAAK,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAC,EAAE,EAAE,CAAC,EAAC,EAAC,CAAC,CAAC,MAAM,EAAE,CAAC;AAC7D,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAChD,CAAC,CAAC;;AAEH,QAAM,GAAG,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;AAChC,QAAM,MAAM,GAAG,+CAAiB,EAAE,CAAC,CAAC;AACpC,UAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACrB,MAAE,CAAE,2CAA2C,EAAE,YAAM;AACnD,cAAM,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAC,EAAE,EAAE,CAAC,EAAC,EAAC,CAAC,CAAC,MAAM,EAAE,CAAC;AAC9D,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9C,cAAM,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;;AAE/B,YAAM,GAAG,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;AAChC,YAAM,MAAM,GAAG,+CAAiB,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAC1D,cAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACrB,cAAM,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAC,EAAE,EAAE,CAAC,EAAC,EAAC,CAAC,CAAC,MAAM,EAAE,CAAC;AAC9D,cAAM,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;KAClC,CAAC,CAAC;;AAEH,QAAM,MAAM,GAAG,+CAAiB,EAAE,CAAC,CAAC;;AAEpC,MAAE,CAAE,oCAAoC,EAAE,YAAM;AAC5C,cAAM,CAAC,GAAG,CAAC,EAAE,EAAE,EAAC,KAAK,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAC,EAAE,EAAE,CAAC,EAAC,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;AACpE,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACjD,CAAC,CAAC;;AAEH,QAAM,MAAM,GAAG,+CAAiB,EAAE,CAAC,CAAC;;AAEpC,MAAE,CAAE,oCAAoC,EAAE,YAAM;AAC5C,cAAM,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;AAC1C,cAAM,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACjD,CAAC,CAAC;CAEN,CAAC,CAAC","file":"slotsRules.js","sourcesContent":["import Slots from \"../slots\";\nimport rules from \"./data/rules\";\n\ndescribe ('Slots Rules', () => {\n    const slots = new Slots(rules, {});\n\n    it ('should set state and execute rules', () => {\n        slots.set('route', {name: 'page', params: {id: 1}}).commit();\n        expect(slots.get('page.title')).toBe('Help');\n    });\n\n    const cb2 = jasmine.createSpy();\n    const slots2 = new Slots(rules, {});\n    slots2.onDidSet(cb2);\n    it ('should call callback if state has changed', () => {\n        slots2.set('route', {name: 'page', params: {id: 1}}).commit();\n        expect(slots2.get('page.title')).toBe('Help');\n        expect(cb2).toHaveBeenCalled();\n\n        const cb4 = jasmine.createSpy();\n        const slots4 = new Slots(rules, slots2.getState().toJS());\n        slots4.onDidSet(cb4);\n        slots4.set('route', {name: 'page', params: {id: 1}}).commit();\n        expect(cb4).toHaveBeenCalled();\n    });\n\n    const slots3 = new Slots(rules, {});\n\n    it ('should set state and execute rules', () => {\n        slots3.set([], {route:{ name: 'page', params: {id: 1} } }).commit();\n        expect(slots3.get('page.title')).toBe('Help');\n    });\n\n    const slots5 = new Slots(rules, {});\n\n    it ('should set state and execute rules', () => {\n        slots5.set('route.name', 'page').commit();\n        expect(slots5.get('page.title')).toBe('Help');\n    });\n\n});"]}