{"version":3,"sources":["../../src/__tests__/slots.js"],"names":[],"mappings":";;;;qBAAkB,UAAU;;;;AAE5B,QAAQ,CAAC,OAAO,EAAE,YAAM;AACpB,QAAI,KAAK,YAAA,CAAC;AACV,MAAE,CAAE,4BAA4B,EAAE,YAAM;;AAEpC,YAAI,KAAK,GAAG;AACR,mBAAO,EAAE,eAAC,MAAK,EAAK,EAEnB;SACJ,CAAC;;AAEF,YAAI,KAAK,GAAG;AACR,aAAC,EAAE;AACC,iBAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;aACb;AACD,aAAC,EAAE,CAAC,CAAC,CAAC;SACT,CAAC;;AAEF,aAAK,GAAG,uBAAU,KAAK,EAAE,KAAK,CAAC,CAAC;AAChC,cAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACxC,cAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;;AAE9D,cAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAClD,CAAC,CAAC;;AAEH,MAAE,CAAE,oBAAoB,EAAE,YAAM;AAC5B,YAAI,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACtB,YAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AACnB,aAAK,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC1B,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;AACzC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;AACnD,cAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC;AACxB,aAAC,EAAE;AACC,iBAAC,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC;aACb;AACD,aAAC,EAAE,CAAC,CAAC,CAAC;SACT,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,QAAM,KAAK,GAAG,uBAAU,EAAE,EAAE,EAAE,CAAC,CAAC;AAChC,SAAK,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAC,EAAE,EAAE,CAAC,EAAC,EAAC,CAAC,CAAC;AACpD,QAAM,KAAK,GAAG,uBAAU,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AACrD,MAAE,CAAE,sBAAsB,EAAE,YAAM;AAC9B,cAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;KACpE,CAAC,CAAC;CACN,CAAC,CAAC","file":"slots.js","sourcesContent":["import Slots from \"../slots\";\n\ndescribe('Slots', () => {\n    let slots;\n    it ('should set Rules and State', () => {\n\n        let rules = {\n            \"route\": (route) => {\n\n            }\n        };\n\n        let state = {\n            s: {\n                b: [1,2,3]\n            },\n            x: [0]\n        };\n\n        slots = new Slots(rules, state);\n        expect(slots.getRules()).toEqual(rules);\n        expect(slots.getRules().route).toEqual(jasmine.any(Function));\n\n        expect(slots.getState().toJS()).toEqual(state);\n    });\n\n    it ('should set and get', () => {\n        let path = [\"s\", \"b\"];\n        let newState = [4];\n        slots.set(path, newState);\n        expect(slots.get(path)).toEqual([4,2,3]);\n        expect(slots.get(path.join('.'))).toEqual([4,2,3]);\n        expect(slots.get()).toEqual({\n            s: {\n                b: [4,2,3]\n            },\n            x: [0]\n        });\n    });\n\n    const flox2 = new Slots({}, {});\n    flox2.set('route', {name: 'page', params: {id: 1}});\n    const flox3 = new Slots({}, flox2.getState().toJS());\n    it ('should restore state', () => {\n        expect(flox3.getState().toJS()).toEqual(flox2.getState().toJS());\n    });\n});\n\n"]}