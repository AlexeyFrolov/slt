{"version":3,"sources":["../../src/__tests__/cascadeRules.js"],"names":[],"mappings":";;;;gCAAkB,qBAAqB;;;;qBACrB,UAAU;;;;AAE5B,IAAM,KAAK,GAAG,sDAAiB,EAAE,CAAC,CAAC;;AAEnC,QAAQ,CAAC,eAAe,EAAE,YAAM;;AAE5B,MAAE,CAAC,8CAA8C,EAAE,YAAM;AACrD,YAAI,GAAG,GAAG,MAAM,CAAC;AACjB,aAAK,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;AACnC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAExC,CAAC,CAAC;;AAEH,MAAE,CAAC,iDAAiD,EAAE,YAAM;AACxD,YAAI,IAAI,GAAG,OAAO,CAAC;AACnB,aAAK,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;AACpC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzC,CAAC,CAAC;;AAEH,MAAE,CAAC,qBAAqB,EAAE,YAAM;AAC5B,YAAI,IAAI,GAAG,OAAO,CAAC;AACnB,aAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;AAC1C,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzC,CAAC,CAAC;;AAEH,MAAE,CAAC,2BAA2B,EAAE,YAAM;AAClC,YAAI,IAAI,GAAG,OAAO,CAAC;AACnB,aAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;AAC7E,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;KAC1D,CAAC,CAAC;;AAEH,MAAE,CAAC,0BAA0B,EAAE,YAAM;AACjC,YAAI,IAAI,GAAG,OAAO,CAAC;AACnB,aAAK,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC;AACpD,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzC,CAAC,CAAC;CACN,CAAC,CAAC","file":"cascadeRules.js","sourcesContent":["import rules from \"./data/cascadeRules\";\nimport Slots from \"../slots\";\n\nconst slots = new Slots(rules, {});\n\ndescribe('Slots cascade', () => {\n\n    it('should set state and execute rules on scalar', () => {\n        let url = \"test\";\n        slots.set('request', url).commit();\n        expect(slots.get('request')).toBe(url);\n        expect(slots.get('users')).toBe(url);\n\n    });\n\n    it('should update state and execute rules on scalar', () => {\n        let url2 = \"test2\";\n        slots.set('request', url2).commit();\n        expect(slots.get('request')).toBe(url2);\n        expect(slots.get('users')).toBe(url2);\n    });\n\n    it('should set w/o path', () => {\n        let url3 = \"test3\";\n        slots.set([], { request: url3 }).commit();\n        expect(slots.get('request')).toBe(url3);\n        expect(slots.get('users')).toBe(url3);\n    });\n\n    it('should multi set w/o path', () => {\n        let url4 = \"test4\";\n        slots.set([], { request: url4, any: 3, another: { test: \"test\" } }).commit();\n        expect(slots.get('request')).toBe(url4);\n        expect(slots.get('users')).toBe(url4);\n        expect(slots.get('any')).toBe(3);\n        expect(slots.get('another')).toEqual({ test: \"test\" });\n    });\n\n    it('should overwrite by rule', () => {\n        let url5 = \"test5\";\n        slots.set([], { request: url5, users: 3 }).commit();\n        expect(slots.get('request')).toBe(url5);\n        expect(slots.get('users')).toBe(url5);\n    });\n});"]}