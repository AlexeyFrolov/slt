{"version":3,"sources":["../../src/__tests__/cascadeRules.js"],"names":[],"mappings":";;;;gCAAkB,qBAAqB;;;;qBACrB,UAAU;;;;AAE5B,IAAM,KAAK,GAAG,sDAAiB,EAAE,CAAC,CAAC;;AAEnC,QAAQ,CAAC,eAAe,EAAE,YAAM;;AAE5B,MAAE,CAAC,8CAA8C,EAAE,YAAM;AACrD,YAAI,GAAG,GAAG,MAAM,CAAC;AACjB,aAAK,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AAC1B,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACvC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAExC,CAAC,CAAC;;AAEH,MAAE,CAAC,iDAAiD,EAAE,YAAM;AACxD,YAAI,IAAI,GAAG,OAAO,CAAC;AACnB,aAAK,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC3B,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,cAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACzC,CAAC,CAAC;;;;;;;;CASN,CAAC,CAAC","file":"cascadeRules.js","sourcesContent":["import rules from \"./data/cascadeRules\";\nimport Slots from \"../slots\";\n\nconst slots = new Slots(rules, {});\n\ndescribe('Slots cascade', () => {\n\n    it('should set state and execute rules on scalar', () => {\n        let url = \"test\";\n        slots.set('request', url);\n        expect(slots.get('request')).toBe(url);\n        expect(slots.get('users')).toBe(url);\n\n    });\n\n    it('should update state and execute rules on scalar', () => {\n        let url2 = \"test2\";\n        slots.set('request', url2);\n        expect(slots.get('request')).toBe(url2);\n        expect(slots.get('users')).toBe(url2);\n    });\n\n\n    //it('should set state and execute rules on object', () => {\n    //    let url = {\"test\": \"test\"};\n    //    slots.set('request', url);\n    //    expect(slots.get('request')).toEqual(url);\n    //    expect(slots.get('users')).toEqual(url);\n    //});\n});"]}