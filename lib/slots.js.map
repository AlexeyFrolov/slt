{"version":3,"sources":["../src/slots.js"],"names":[],"mappings":"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","file":"slots.js","sourcesContent":["import { fromJS, is, Map, List} from \"immutable\";\n\nfunction isFunction(v) {\n    return Object.prototype.toString.call(v) === \"[object Function]\";\n}\n\nclass Slots {\n    constructor(rules = {}, state = {}) {\n        this.rules =\n            Slots.validateRules(\n                Slots.normalizeRules(\n                    fromJS(rules)));\n\n        this.state = fromJS(state);\n        this.promises = [];\n        this.onChangeListeners = [];\n        this.onPromisesAreMadeListeners = [];\n        this.onPromiseErrorListeners = [];\n    }\n\n    reset() {\n        this.state = fromJS({});\n        this.promises = [];\n        this.onChangeListeners = [];\n        this.onPromisesAreMadeListeners = [];\n        this.onPromiseErrorListeners = [];\n    }\n\n    setState(value) {\n        return this.set([], value);\n    }\n\n    set(path = [], value = {}, state = null, optimistic = true, save = true) {\n        path = Slots.path(path);\n        state = state || this.state;\n        if (value && isFunction(value.then)) {\n            this.promises.push(value);\n            value.then((val) => {\n                    this.promises.splice(this.promises.indexOf(value), 1);\n                    this.set(path, val); // RECURSION with resolved value\n                })\n                .error((msg) => {\n                    this.onPromiseErrorListeners.forEach(f => f(msg));\n                })\n                .catch((msg) => {\n\n                })\n                .finally(() => {\n                });\n        }\n            let i = path.length;\n            let v = value;\n            while (i--) {\n                let p = path.slice(0, i);\n                let tmp = {};\n                tmp[path.slice(i)] = v;\n                v = tmp;\n                if (this.rules.get(p.join(\".\"))) {\n                    path = p;\n                    value = v;\n                }\n            }\n            let imValue = fromJS(value);\n            let result = imValue.toJS ? state.mergeDeepIn(path, imValue)\n                : state.setIn(path, imValue);\n            const applyRules = (path = new List(), value = new Map()) => {\n                let rule = this.rules.get(path.toArray().join(\".\"));\n                if (isFunction(rule)) {\n                    let p = result.getIn(path);\n                    result = result.mergeDeep(\n                        rule(p && p.toJS && p.toJS() || p, this.getContext(result)));\n                }\n                if (!Map.isMap(value)) {\n                    return;\n                }\n                value.flip().toList().map((k) => applyRules(path.push(k), value.get(k)));\n            };\n            applyRules(new List(path), result);\n            let newState = result;\n            if (optimistic && !is(this.state, newState)) {\n                if (save) {\n                    this.state = newState;\n                    if (!this.promises.length) {\n                        this.onPromisesAreMadeListeners.forEach(f => f(this.state.toJS()));\n                    }\n                    this.onChangeListeners.forEach(f => f(this.state.toJS()));\n                }\n            }\n            return result;\n    }\n\n    getState() {\n        return this.state.toJS();\n    }\n\n    get(path = null) {\n        if (!path) {\n            return this.getState();\n        }\n        path = Slots.path(path);\n        let value = this.state.getIn(path);\n        return value && value.toJS && value.toJS() || value;\n    }\n\n    getRules() {\n        return this.rules.toJS();\n    }\n\n    getContext(state) {\n        return {\n            set: (path, value) => {\n                return this.set(path, value, state,  false, false);\n            }\n        }\n    }\n\n    getRule(path) {\n        path = Slots.path(path);\n        return this.rules[path.join(\".\")];\n    }\n\n    onChange(fn) {\n        this.onChangeListeners.push(fn);\n    }\n\n    onPromisesAreMade(fn) {\n        this.onPromisesAreMadeListeners.push(fn);\n    }\n\n    onPromiseError(fn) {\n        this.onPromiseErrorListeners.push(fn);\n    }\n\n    isEqual(state) {\n        return is(fromJS(state), this.state);\n    }\n\n    static normalizeRules(rule) {\n        return rule;\n    }\n\n    static validateRules (rules) {\n        return rules;\n    }\n\n    static path(path) {\n        if (path === null) {\n            return null;\n        }\n        return  Object.prototype.toString.call(path) === \"[object Array]\" && path ||\n                Object.prototype.toString.call(path) === \"[object String]\" && path.split('.') ||\n                (() => { throw new Error (\n                    `path should be an array or dot-separated string or null,\n                    ` + Object.prototype.toString.call(path) + ` given`) } )()\n    }\n\n}\n\nexport default Slots;"]}