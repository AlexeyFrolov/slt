{"version":3,"sources":["../src/slots.js"],"names":[],"mappings":"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","file":"slots.js","sourcesContent":["import { fromJS, is, Map, List} from \"immutable\";\nimport debug from \"debug\";\nimport { toJS, isArray, isString, isFunction, isPromise, insp } from \"./utils\";\nimport Context from \"./context\";\nconst d = debug(\"slt\");\nconst log = debug(\"slt:log\");\n\nclass Slots {\n    constructor(rules = {}, state = {}, aliases = {}) {\n        this.rules =\n            Slots.validateRules(\n                Slots.normalizeRules(\n                    fromJS(rules)));\n\n        this.state = fromJS(state);\n        this.contexts = [];\n        this.promises = [];\n        this.onChangeListeners = [];\n        this.onPromisesAreMadeListeners = [];\n        this.onPromiseErrorListeners = [];\n        this.onSetListeners = [];\n        this.onCommitListeners = [];\n    }\n\n    reset() {\n        this.state = fromJS({});\n        this.promises = [];\n        this.onChangeListeners = [];\n        this.onPromisesAreMadeListeners = [];\n        this.onPromiseErrorListeners = [];\n    }\n\n    setState(value) {\n        return this.set([], value);\n    }\n\n    set(path = [], value = {}) {\n        let ctx = new Context(this);\n        this.contexts.push(ctx);\n        ctx.set(path, value);\n        return ctx;\n    }\n\n    commit (ctx) {\n        if (!ctx.promises.length) {\n            log(\"NO PROMISES LEFT FOR CONTEXT %s\", insp(ctx.path));\n            this.contexts.splice(this.contexts.indexOf(ctx), 1);\n        }\n        log(\"COMMIT %s\", insp(ctx.state));\n        if (is(this.state, ctx.state)) {\n            log(\"NO STATE CHANGES IN CONTEXT %s\", insp(ctx.path));\n            return this;\n        }\n        this.state = ctx.state;\n        if (!this.promises.length) {\n            this.onPromisesAreMadeListeners.forEach(f => f(this.state.toJS()));\n        }\n        this.onChangeListeners.forEach(f => f(this.state.toJS()));\n        this._fireOnCommit(ctx);\n        log(\"LISTENERS DONE\", insp(ctx.state));\n        return ctx;\n    }\n\n    getContexts() {\n        return this.contexts;\n    }\n\n    toString() {\n\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    get(path = null, state = null) {\n        state = state || this.state;\n        if (!path) {\n            return state.toJS();\n        }\n        path = Slots.makePath(path);\n        let value = state.getIn(path);\n        return toJS(value);\n    }\n\n    getRules() {\n        return this.rules.toJS();\n    }\n\n    getContext(state) {\n        return {\n            set: (path, value) => {\n                return this.set(path, value, state,  false, false);\n            },\n            get: (path) => {\n                return this.get(path, state);\n            },\n            getState: () => {\n                return state;\n            }\n        }\n    }\n\n    reducePathAndValue(path, value) {\n        let i = path.length;\n        let v = value;\n        while (i--) {\n            let p = path.slice(0, i);\n            let tmp = {};\n            tmp[path.slice(i)] = v;\n            v = tmp;\n            if (this.rules.get(p.join(\".\"))) {\n                path = p;\n                value = v;\n            }\n        }\n        return { path, value }\n    }\n\n    getRule(path) {\n        path = Slots.makePath(path);\n        return this.rules[path.join(\".\")];\n    }\n\n    onChange(fn) {\n        this.onChangeListeners.push(fn);\n    }\n\n    onSet(fn) {\n        this.onSetListeners.push(fn);\n    }\n\n    _fireOnSet(branch) {\n        this.onSetListeners.forEach(fn => fn(branch));\n    }\n\n    onCommit(fn) {\n        this.onCommitListeners.push(fn);\n    }\n\n    _fireOnCommit(context) {\n        this.onCommitListeners.forEach(fn => fn(context));\n    }\n\n    onPromisesAreMade(fn) {\n        this.onPromisesAreMadeListeners.push(fn);\n    }\n\n    onPromiseError(fn) {\n        this.onPromiseErrorListeners.push(fn);\n    }\n\n    isEqual(state) {\n        return is(fromJS(state), this.state);\n    }\n\n    static normalizeRules(rule) {\n        return rule;\n    }\n\n    static validateRules (rules) {\n        return rules;\n    }\n\n    static makePath(path) {\n        if (path === null) {\n            return null;\n        }\n        return  isArray(path) && path || isString(path) && path.split('.') ||\n                (() => { throw new Error (\n                    `path should be an array or dot-separated string or null,\n                    ` + Object.prototype.toString.call(path) + ` given`) } )()\n    }\n\n}\n\nexport default Slots;"]}