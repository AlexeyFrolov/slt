{"version":3,"sources":["../src/slots.js"],"names":[],"mappings":"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","file":"slots.js","sourcesContent":["import { fromJS, is, Map, List} from \"immutable\";\nimport debug from \"debug\";\nimport { toJS, isArray, isString, isNumber, isFunction, isPromise, insp } from \"./utils\";\nimport Context from \"./context\";\nconst d = debug(\"slt\");\nconst log = debug(\"slt:log\");\n\nclass Slots {\n    constructor(rules = {}, state = {}, aliases = {}) {\n        this.rules = Object.keys(rules).reduce((res, key) => {\n            res[key] = Slots.normalizeRule(rules[key]);\n            return res;\n        }, {});\n        this.state = fromJS(state);\n        this.contexts = [];\n        this.listeners = {};\n    }\n\n    reset() {\n        this.state = fromJS({});\n        this.listeners = {};\n    }\n\n    setState(value) {\n        return this.set([], value);\n    }\n\n    set(path = [], value = {}) {\n        let ctx = new Context(this);\n        this.contexts.push(ctx);\n        ctx.set(path, value);\n        return ctx;\n    }\n\n    commit (ctx) {\n        let prevState = this.state;\n        this._fire(\"willCommit\", ctx.state);\n        log(\"COMMIT %s\", insp(ctx.state));\n        this.state = ctx.state;\n        this._fire(\"didCommit\", prevState);\n        this._checkPromises();\n        log(\"LISTENERS DONE\", insp(ctx.state));\n        return ctx;\n    }\n\n    on(eventName, fn) {\n        if (this.listeners[eventName] === undefined) {\n            this.listeners[eventName] = [];\n        }\n        if (this.listeners[eventName].filter(f => f.toString() === fn.toString()).length) {\n            return this.listeners[eventName].length;\n        }\n        return this.listeners[eventName].push(fn);\n    }\n\n    _fire(eventName, ...args) {\n        let listeners = this.listeners[eventName];\n        if (!listeners) {\n            return;\n        }\n        listeners.forEach(fn => fn.apply(this, args));\n    }\n\n    _checkPromises() {\n        if (this.contexts.filter((context) => context.promises.length).length) {\n            return;\n        }\n        this._fire(\"allPromisesDone\");\n    }\n\n    onWillSet(fn) {\n        return this.on(\"willSet\", fn);\n    }\n\n    onDidSet(fn) {\n        return this.on(\"didSet\", fn);\n    }\n\n    onWillCommit(fn) {\n        return this.on(\"willCommit\", fn);\n    }\n\n    onDidCommit(fn) {\n        return this.on(\"didCommit\", fn);\n    }\n\n    onAllPromisesDone(fn) {\n        return this.on(\"allPromisesDone\", fn);\n    }\n\n\n    getContexts() {\n        return this.contexts;\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    get(path = null, state = null) {\n        state = state || this.state;\n        if (!path) {\n            return state.toJS();\n        }\n        path = Slots.makePath(path);\n        let value = state.getIn(path);\n        return toJS(value);\n    }\n\n    getRule(path) {\n        path = Slots.makePath(path);\n        return this.rules[Slots.makeDottedPath(path)];\n    }\n\n    getSetRule(path) {\n        let rule = this.getRule(path);\n        return rule && rule.set;\n    }\n\n    getDeps(path) {\n        let rule = this.getRule(path);\n        return rule && rule.deps;\n    }\n\n\n    isEqual(state) {\n        return is(fromJS(state), this.state);\n    }\n\n    static normalizeRule(rule) {\n        if (isFunction(rule)) {\n            let fn = rule;\n            rule = {\n                \"set\": fn\n            };\n        }\n        if (!rule.deps) {\n            rule.deps = [];\n        }\n        if (!isArray(rule.deps)) {\n            throw new Error(\"Invalid rule\");\n        }\n        return rule;\n    }\n\n    static makePath(path) {\n        if (path === null) {\n            return null;\n        }\n        if (path.toArray) {\n            path = path.toArray();\n        }\n        return  isArray(path) && path || (isString(path) || isNumber(path)) && path.toString().split('.') ||\n                (() => { throw new Error (\n                    `path should be an array or dot-separated string or null,\n                    ` + Object.prototype.toString.call(path) + ` given`) } )()\n    }\n\n    static makeDottedPath(path) {\n        return Slots.makePath(path).join(\".\");\n    }\n\n}\n\nexport default Slots;"]}