{"version":3,"sources":["../src/slots.js"],"names":[],"mappings":"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","file":"slots.js","sourcesContent":["import { fromJS, is, Map, List} from \"immutable\";\nimport debug from \"debug\";\nimport util from 'util';\nconst d = debug(\"slt\");\nconst log = debug(\"slt:log\");\n\nfunction insp(value) {\n    value = value.toJS ? value.toJS() : value;\n    value = isArray(value) ? value.join(\".\") : value;\n    value = isFunction(value.then) ? \"__promise__\" : value;\n    return util.inspect(value, {colors: typeof window === \"undefined\", depth: 0}).replace('\\n', '');\n}\n\nfunction isFunction(v) {\n    return Object.prototype.toString.call(v) === \"[object Function]\";\n}\n\nfunction isPromise(v) {\n    return isFunction(v.then);\n}\n\nfunction isArray(v) {\n    return Object.prototype.toString.call(v) === \"[object Array]\";\n}\n\nfunction isString(v) {\n    return Object.prototype.toString.call(v) === \"[object String]\";\n}\n\nclass Slots {\n    constructor(rules = {}, state = {}) {\n        this.rules =\n            Slots.validateRules(\n                Slots.normalizeRules(\n                    fromJS(rules)));\n\n        this.state = fromJS(state);\n        this.promises = [];\n        this.onChangeListeners = [];\n        this.onPromisesAreMadeListeners = [];\n        this.onPromiseErrorListeners = [];\n    }\n\n    reset() {\n        this.state = fromJS({});\n        this.promises = [];\n        this.onChangeListeners = [];\n        this.onPromisesAreMadeListeners = [];\n        this.onPromiseErrorListeners = [];\n    }\n\n    setState(value) {\n        return this.set([], value);\n    }\n\n    set(path = [], value = {}, state = null, optimistic = true, save = true) {\n        var self = this;\n        state = state || this.state;\n        ({path, value} = this.reducePathAndValue(Slots.path(path), value));\n        if (value && isPromise(value)) {\n            this.promises.push(value);\n            value.then((data) => {\n                this.promises.splice(this.promises.indexOf(value), 1);\n                log(\"RESOLVED %s\", insp(path));\n                if (isFunction(data.set)) {\n                    doSave(data.getState());\n                } else {\n                    this.set(path, data);\n                }\n                })\n                .error((msg) => {\n                    this.onPromiseErrorListeners.forEach(f => f(msg));\n                })\n                .catch((msg) => {\n\n                })\n                .finally(() => {\n                });\n        }\n        log(\"SET %s TO %s\", insp(path), insp(value));\n        let imValue = fromJS(value);\n        let result = imValue.toJS ? state.mergeDeepIn(path, imValue)\n            : state.setIn(path, imValue);\n        d(\"MERGED \\n%s\", insp(result));\n        const applyRules = (path = new List(), value = new Map()) => {\n            let rule = this.rules.get(path.toArray().join(\".\"));\n            if (isFunction(rule)) {\n                let val = result.getIn(path);\n                log(\"RULE on path %s with value %s\", insp(path), insp(val));\n                let newContext = rule.call(this.getContext(result), val && val.toJS && val.toJS() || val);\n                if (isPromise(newContext)) {\n                    log(\"RETURNED PROMISE. BEGIN NEW CONTEXT\");\n                    newContext.bind(this.getContext(this.state)); // out of callstack (e.g. transaction context)\n                    newContext.then((data) => {\n                        doSave(data.getState());\n                    });\n                } else {\n                    result = result.mergeDeep(newContext.getState());\n                    d(\"RESULT is %s\", insp(result));\n                }\n            }\n            if (!Map.isMap(value)) {\n                return;\n            }\n            value.flip().toList().map((k) => applyRules(path.push(k), value.get(k)));\n        };\n        applyRules(new List(path), result);\n        let newState = result;\n        doSave (newState);\n\n        function doSave (newState) {\n            if (optimistic && !is(self.state, newState)) {\n                if (save) {\n                    log(\"SAVE %s\", insp(newState));\n                    self.state = newState;\n                    if (!self.promises.length) {\n                        self.onPromisesAreMadeListeners.forEach(f => f(self.state.toJS()));\n                    }\n                    self.onChangeListeners.forEach(f => f(self.state.toJS()));\n                    d(\"LISTENERS DONE %s\", insp(newState));\n                }\n            }\n        }\n        return this.getContext(result);\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    get(path = null, state = null) {\n        state = state || this.state;\n        if (!path) {\n            return state.toJS();\n        }\n        path = Slots.path(path);\n        let value = state.getIn(path);\n        return value && value.toJS && value.toJS() || value;\n    }\n\n    getRules() {\n        return this.rules.toJS();\n    }\n\n    getContext(state) {\n        return {\n            set: (path, value) => {\n                return this.set(path, value, state,  false, false);\n            },\n            get: (path) => {\n                return this.get(path, state);\n            },\n            getState: () => {\n                return state;\n            }\n        }\n    }\n\n    reducePathAndValue(path, value) {\n        let i = path.length;\n        let v = value;\n        while (i--) {\n            let p = path.slice(0, i);\n            let tmp = {};\n            tmp[path.slice(i)] = v;\n            v = tmp;\n            if (this.rules.get(p.join(\".\"))) {\n                path = p;\n                value = v;\n            }\n        }\n        return { path, value }\n    }\n\n    getRule(path) {\n        path = Slots.path(path);\n        return this.rules[path.join(\".\")];\n    }\n\n    onChange(fn) {\n        this.onChangeListeners.push(fn);\n    }\n\n    onPromisesAreMade(fn) {\n        this.onPromisesAreMadeListeners.push(fn);\n    }\n\n    onPromiseError(fn) {\n        this.onPromiseErrorListeners.push(fn);\n    }\n\n    isEqual(state) {\n        return is(fromJS(state), this.state);\n    }\n\n    static normalizeRules(rule) {\n        return rule;\n    }\n\n    static validateRules (rules) {\n        return rules;\n    }\n\n    static path(path) {\n        if (path === null) {\n            return null;\n        }\n        return  isArray(path) && path || isString(path) && path.split('.') ||\n                (() => { throw new Error (\n                    `path should be an array or dot-separated string or null,\n                    ` + Object.prototype.toString.call(path) + ` given`) } )()\n    }\n\n}\n\nexport default Slots;"]}