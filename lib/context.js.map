{"version":3,"sources":["../src/context.js"],"names":[],"mappings":"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","file":"context.js","sourcesContent":["import { fromJS, is, Map, List} from \"immutable\";\nimport debug from \"debug\";\nimport util from \"util\";\nimport Branch from \"./branch\";\nimport Slots from \"./slots\";\nconst d = debug(\"slt\");\nconst log = debug(\"slt:log\");\n\nfunction isFunction(v) {\n    return Object.prototype.toString.call(v) === \"[object Function]\";\n}\n\nfunction isPromise(v) {\n    return isFunction(v.then);\n}\n\nfunction isImmutable(v) {\n    return isFunction(v.toJS);\n}\n\nfunction isArray(v) {\n    return Object.prototype.toString.call(v) === \"[object Array]\";\n}\n\nfunction isString(v) {\n    return Object.prototype.toString.call(v) === \"[object String]\";\n}\n\nfunction insp(value) {\n    value = isImmutable(value) ? value.toJS() : value;\n    value = isArray(value) ? value.join(\".\") : value;\n    value = isFunction(value.then) ? \"__promise__\" : value;\n    return util.inspect(value, {colors: typeof window === \"undefined\", depth: 0}).replace('\\n', '');\n}\n\nclass Context {\n    constructor(slots) {\n        this.rules = slots.rules;\n        this.state = slots.state;\n        this.initialState = slots.state;\n        this.slots = slots;\n        this.branches = [];\n        this.promises = [];\n    }\n\n    reset() {\n        this.state = this.initialState;\n        this.promises = [];\n    }\n\n    setState(value) {\n        return this.set([], value);\n    }\n\n    set(path = [], value = {}) {\n        let branch = new Branch(this.rules, this.state, this);\n        this.branches.push(branch);\n        this.state = branch.set(path, value).getState();\n        this.commit();\n        return this;\n    }\n\n    commit() {\n        this.slots.commit(this);\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    getRules() {\n        return this.rules.toJS();\n    }\n\n    static path(path) {\n        if (path === null) {\n            return null;\n        }\n        return  isArray(path) && path || isString(path) && path.split('.') ||\n            (() => { throw new Error (\n                `path should be an array or dot-separated string or null,\n                    ` + Object.prototype.toString.call(path) + ` given`) } )()\n    }\n\n    get(path = null, state = null) {\n        state = state || this.state;\n        if (!path) {\n            return state.toJS();\n        }\n        path = Slots.path(path);\n        let value = state.getIn(path);\n        return value && isImmutable(value) && value.toJS() || value;\n    }\n\n}\n\n//Context.prototype.get = require(\"./slots\").prototype.get;\n\nexport default Context;"]}