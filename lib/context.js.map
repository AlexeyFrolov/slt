{"version":3,"sources":["../src/context.js"],"names":[],"mappings":"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","file":"context.js","sourcesContent":["import { fromJS, is, Map, List} from \"immutable\";\nimport debug from \"debug\";\nimport { toJS } from \"./utils\";\nimport Branch from \"./branch\";\nimport Slots from \"./slots\";\nconst d = debug(\"slt\");\nconst log = debug(\"slt:log\");\n\nclass Context {\n    constructor(slots) {\n        this.rules = slots.rules;\n        this.state = slots.state;\n        this.initialState = slots.state;\n        this.slots = slots;\n        this.path = [];\n        this.branches = [];\n        this.promises = [];\n    }\n\n    reset() {\n        this.state = this.initialState;\n        this.promises = [];\n    }\n\n    setState(value) {\n        return this.set([], value);\n    }\n\n    set(path = [], value = {}) {\n        this.path = path;\n        let prevState = this.state;\n        let branch = new Branch(this.state, this.slots, this);\n        this.branches.push(branch);\n        this.slots._fire(\"beforeSet\", prevState, this);\n        let newState = branch.set(path, value).getState();\n        this.slots._fire(\"willSet\", newState, this); //TODO: return false == do nothing\n        this.state = newState;\n        this.slots._fire(\"didSet\", prevState, this);\n        this.branches.splice(this.branches.indexOf(branch), 1);\n        return this;\n    }\n\n    commit() {\n        this.slots.commit(this);\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    getRules() {\n        return this.rules.toJS();\n    }\n\n    static makePath(path) {\n        if (path === null) {\n            return null;\n        }\n        return  isArray(path) && path || isString(path) && path.split('.') ||\n            (() => { throw new Error (\n                `path should be an array or dot-separated string or null,\n                    ` + Object.prototype.toString.call(path) + ` given`) } )()\n    }\n\n    get(path = null, state = null) {\n        state = state || this.state;\n        if (!path) {\n            return state.toJS();\n        }\n        path = Slots.makePath(path);\n        let value = state.getIn(path);\n        return toJS(value);\n    }\n\n}\n\n//Context.prototype.get = require(\"./slots\").prototype.get;\n\nexport default Context;"]}